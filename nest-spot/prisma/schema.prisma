// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}


model User {
  id              String @id @default(auto()) @map("_id") @db.ObjectId
  firstName           String?
  lastName            String?
  email           String?   @unique
  emailVerified   DateTime?
  image           String?
  hashedPassword  String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  favoriteIds     String[] @db.ObjectId
  
  wishlists          Wishlist[]
  accounts Account[]
  listings Listing[]
  trip Trip[]
}

model Account {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId             String   @db.ObjectId
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.String
  access_token       String?  @db.String
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.String
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}


model Listing {
  createdAt          DateTime   @default(now())
  description        String     
  id             String @id @default(auto()) @map("_id") @db.ObjectId
  listingCreatedBy   User       @relation(fields: [listingCreatedById], references: [id])
  listingCreatedById String  @db.ObjectId
  locationData       Json
  locationType       String
  mapData            Json
  photos             Json
  placeAmeneites     Json
  placeSpace         Json
  placetype          String
  price              Int
  title              String
  trips              Trip[]
  updatedAt          DateTime   @updatedAt
  wishlists          Wishlist[]
}
// model Listing {
//   id             String @id @default(auto()) @map("_id") @db.ObjectId
//   title String
//   description String
//   imageSrc String
//   createdAt DateTime @default(now())
//   category  String
//   genre String
//   author String
//   userId String @db.ObjectId
  
  
//   wishlists Wishlist[]
//   user User @relation(fields: [userId], references: [id], onDelete: Cascade)
//   trip Trip[]
// }

model Wishlist {
  createdAt DateTime @default(now())
  id              String @id @default(auto()) @map("_id") @db.ObjectId
  listing   Listing  @relation(fields: [listingId], references: [id], onDelete: Cascade)
  listingId String @db.ObjectId
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    String @db.ObjectId
}

model Trip {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  listingId String @db.ObjectId  
  startDate DateTime
  endDate DateTime
  totalPrice Int
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  listing Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)
}






// model User {
//   id              String @id @default(auto()) @map("_id") @db.ObjectId
//   name            String?
//   email           String?   @unique
//   emailVerified   DateTime?
//   image           String?
//   hashedPassword  String?
//   createdAt       DateTime @default(now())
//   updatedAt       DateTime @updatedAt
//   favoriteIds     String[] @db.ObjectId

//   accounts Account[]
//   listings Listing[]
//   reservations Reservation[]
// }

// model Account {
//   id String @id @default(auto()) @map("_id") @db.ObjectId
//   userId             String   @db.ObjectId
//   type               String
//   provider           String
//   providerAccountId  String
//   refresh_token      String?  @db.String
//   access_token       String?  @db.String
//   expires_at         Int?
//   token_type         String?
//   scope              String?
//   id_token           String?  @db.String
//   session_state      String?

//   user User @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@unique([provider, providerAccountId])
// }

// model Listing {
//   id             String @id @default(auto()) @map("_id") @db.ObjectId
//   title String
//   description String
//   imageSrc String
//   createdAt DateTime @default(now())
//   category  String
//   roomCount Int
//   bathroomCount Int
//   guestCount Int
//   locationValue String
//   userId String @db.ObjectId
//   price Int

//   user User @relation(fields: [userId], references: [id], onDelete: Cascade)
//   reservations Reservation[]
// }

// model Reservation {
//   id String @id @default(auto()) @map("_id") @db.ObjectId
//   userId String @db.ObjectId
//   listingId String @db.ObjectId  
//   startDate DateTime
//   endDate DateTime
//   totalPrice Int
//   createdAt DateTime @default(now())

//   user User @relation(fields: [userId], references: [id], onDelete: Cascade)
//   listing Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)
// }
